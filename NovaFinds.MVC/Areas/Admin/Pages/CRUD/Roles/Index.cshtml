@page
@model NovaFinds.MVC.Areas.Admin.Pages.CRUD.Roles.IndexModel

@{ ViewData["Title"] = "Roles List"; }

<h1>@ViewData["Title"]</h1>

<p>
    <a class="btn btn-primary" asp-page="./Create">Create New</a>
</p>
<table class="table table-striped">
    <thead class="thead-dark">
    @if (Model.Roles is { Count: > 0 }){
        <tr scope="row">
            <th scope="col">
                @Html.DisplayNameFor(model => model.Roles![0].Id)
            </th>
            <th scope="col">
                @Html.DisplayNameFor(model => model.Roles![0].Name)
            </th>
            <th scope="col"></th>
        </tr>
    }
    </thead>
    <tbody>
    @if (Model.Roles is { Count: > 0 }){
        @foreach (var role in Model.Roles){
            <tr scope="row">
                <td>
                    @Html.DisplayFor(modelItem => role.Id)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => role.Name)
                </td>
                <td>
                    <div class="btn-group" role="group">
                        @if (role.Name.ToLower() != "admin" && role.Name.ToLower() != "user"){
                            <a class="btn btn-primary" asp-page="./Edit" asp-route-id="@role.Id">Edit</a>
                        }
                        <a class="btn btn-outline-primary" asp-page="./Details" asp-route-id="@role.Id">Details</a>
                        @if (role.Name.ToLower() != "admin" && role.Name.ToLower() != "user"){
                            <a class="btn btn-danger" asp-page="./Delete" asp-route-id="@role.Id">Delete</a>
                        }
                    </div>
                </td>
            </tr>
        }
    }
    else{
        <tr>
            <td>
                No Roles can be found!
            </td>
        </tr>
    }
    </tbody>
</table>
<div class="row mb-4 mt-3">
    <div class="col-md-12">
        @await Component.InvokeAsync("Pagination", new { paginator = ViewData["Pagination"], text = ViewData["PaginationText"] })
    </div>
</div>